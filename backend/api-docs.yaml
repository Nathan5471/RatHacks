openapi: 3.1.1
info:
  title: Rat Hacks API
  version: 1.0.0
  description: API documentation for Rat Hacks

servers:
  - url: https://rathacks.com
    description: Rat Hacks Server

paths:
  /api/auth/register:
    post:
      summary: Register a new user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                  pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*]).{8,16}$'
                firstName:
                  type: string
                lastName:
                  type: string
                homeSchool:
                  type: string
                gradeLevel:
                  type: string
                  enum: ["nine", "ten", "eleven", "twelve"]
                isGovSchool:
                  type: boolean
                techStacK:
                  type: string
                previousHackathon:
                  type: boolean
                parentFirstName:
                  type: string
                parentLastName:
                  type: string
                parentEmail:
                  type: string
                  format: email
                parentPhoneNumber:
                  type: string
                  example: 5408531056
              required:
                - email
                - password
                - firstName
                - lastName
                - homeSchool
                - gradeLevel
                - isGovSchool
                - techStacK
                - previousHackathon
                - parentFirstName
                - parentLastName
                - parentEmail
                - parentPhoneNumber
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered successfully
                required:
                  - message
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: All fields are required
                required:
                  - message
  /api/auth/verify-email:
    post:
      summary: Verify a user's email
      tags:
        - Auth
      parameters:
        - name: email
          in: query
          required: true
          schema:
            type: string
            format: email
          description: User's Email
        - name: token
          in: token
          required: true
          schema:
            type: string
          description: User's token to verify email
      responses:
        200:
          description: Email successfully verified
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email verified successfully
                required:
                  - message
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid email or token
                required:
                  - message
  /api/auth/resend-verification:
    post:
      summary: Resend the verification email
      tags:
        - Auth
      security:
        - cookieAuth: []
      responses:
        200:
          description: Resent the verification email
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Verification email resent
                required:
                  - message
        400:
          description: Email is already verified
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email is already verified
                required:
                  - message
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
                required:
                  - message
        404:
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
                required:
                  - message
        429:
          description: Too many requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: You can only request a new verification email every 15 minutes
                required:
                  - message
  /api/auth/login:
    post:
      summary: Login a user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - email
                - password
      responses:
        200:
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successful
                  token:
                    type: string
                    example: yourToken123
                    format: jwt
                required:
                  - message
                  - token
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email and password are required
                required:
                  - message
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid email or password
                required:
                  - message
  /api/auth/logout:
    post:
      summary: Logout the current user
      tags:
        - Auth
      security:
        - cookieAuth: []
      responses:
        200:
          description: User logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logout successful
                required:
                  - message
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
                required:
                  - message
        404:
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
                required:
                  - message
  /api/auth/logout-all:
    post:
      summary: Logout the current user from all devices
      tags:
        - Auth
      security:
        - cookieAuth: []
      responses:
        200:
          description: User logged out from all devices successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logout from all devices
                required:
                  - message
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
                required:
                  - message
        404:
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
                required:
                  - message
  /api/auth/current-user:
    get:
      summary: Get the currently logged in user
      tags:
        - Auth
      security:
        - cookieAuth: []
      responses:
        200:
          description: successfully got the current user
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  email:
                    type: string
                    format: email
                  emailVerified:
                    type: boolean
                  accountType:
                    type: string
                    enum: ["student", "organizer", "judge"]
                  firstName:
                    type: string
                  lastName:
                    type: string
                  schoolDivision:
                    type: string
                  gradeLevel:
                    type: string
                    enum: ["nine", "ten", "eleven", "twelve"]
                  isGovSchool:
                    type: boolean
                  events:
                    type: array
                    items:
                      type: string
                required:
                  - id
                  - email
                  - isEmailVerified
                  - accountType
                  - firstName
                  - lastName
                  - schoolDivision
                  - gradeLevel
                  - isGovSchool
                  - events
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
                required:
                  - message
        404:
          description: User Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
                required:
                  - message
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error
                required:
                  - message
  /api/auth/update:
    put:
      summary: Update the current user's information
      tags:
        - Auth
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                schoolDivision:
                  type: string
                gradeLevel:
                  type: string
                  enum: ["nine", "ten", "eleven", "twelve"]
                isGovSchool:
                  type: boolean
                techStack:
                  type: string
                previousHackathon:
                  type: boolean
                parentFirstName:
                  type: string
                parentLastName:
                  type: string
                parentEmail:
                  type: string
                  format: email
                parentPhoneNumber:
                  type: string
                  example: 5408531056
              required:
                - firstName
                - lastName
                - schoolDivision
                - gradeLevel
                - isGovSchool
                - techStack
                - previousHackathon
                - parentFirstName
                - parentLastName
                - parentEmail
                - parentPhoneNumber
      responses:
        200:
          description: User information updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User information updated successfully
                required:
                  - message
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: All fields are required
                required:
                  - message
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
                required:
                  - message
        404:
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
                required:
                  - message
  /api/auth/update-password:
    put:
      summary: Update the current user's password
      tags:
        - Auth
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newPassword:
                  type: string
                  minLength: 8
                  pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*]).{8,16}$'
              required:
                - newPassword
      responses:
        200:
          description: Password updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: password updated successfully
                required:
                  - message
          400:
            description: Bad request
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: New password is required
                  required:
                    - message
          401:
            description: Unauthorized
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: Unauthorized'
                  required:
                    - message
          404:
            description: User not found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: User not found
                  required:
                    - message
  /api/auth/delete:
    delete:
      summary: Delete the current user's account
      tags:
        - Auth
      security:
        - cookieAuth: []
      responses:
        200:
          description: User account deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User account deleted successfully
                required:
                  - message
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  mesasge:
                    type: string
                    example: Unauthorized
                required:
                  - message
        404:
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
                required:
                  - message
  /api/event/create:
    post:
      summary: Create an event
      tags:
        - Events
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                location:
                  type: string
                startDate:
                  type: string
                  format: date-time
                endDate:
                  type: string
                  format: date-time
                submissionDeadline:
                  type: string
                  format: date-time
              required:
                - name
                - description
                - location
                - startDate
                - endDate
                - submissionDeadline
      responses:
        201:
          description: Event created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Event created successfully
                  id:
                    type: string
                    format: uuid
                required:
                  - message
                  - id
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Name, description, location, start date, end date, and submission deadline are required
                required:
                  - message
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
                required:
                  - message
        403:
          descrpition: Unauthorized
          content:
            application/json:
              schema:
                type: object
                porperties:
                  message:
                    type: string
                    example: Unauthorized
        404:
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not Found
  /api/event/join/{eventId}:
    post:
      summary: Join an event
      tags:
        - Events
      security:
        - cookieAuth: []
      parameters:
        - name: eventId
          in: paths
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Joined event successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Joined event successfully
                required:
                  - message
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Event ID is required
                required:
                  - message
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
                required:
                  - message
        404:
          description: Event or user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Event not found
              required:
                - message
  /api/event/leave/{eventId}:
    post:
      summary: Leave an event
      tags:
        - Events
      secuirty:
        - cookieAuth: []
      parameters:
        - name: eventId
          in: paths
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Left event successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Joined event successfully
                required:
                  - message
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Event ID is required
                required:
                  - message
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
                required:
                  - message
        404:
          description: Event or user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Event not found
                required:
                  - message
  /api/event/update/{eventId}:
    put:
      summary: Update an event
      tags:
        - Events
      secuirty:
        - cookieAuth: []
      parameters:
        - name: eventId
          in: paths
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                location:
                  type: string
                startDate:
                  type: string
                  format: date-time
                endDate:
                  type: string
                  format: date-time
                submissionDeadline:
                  type: string
                  format: date-time
              required:
                - name
                - description
                - location
                - startDate
                - endDate
                - submissionDeadline
      responses:
        200:
          description: Event updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Event updated successfully
                required:
                  - message
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: ID, name, description, location, start date, end date, and submission deadline are required
                required:
                  - message
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
                required:
                  - message
        403:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
                required:
                  - message
        404:
          description: Event or user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Event not found
                required:
                  - message
  /api/event/all:
    get:
      summary: Get all events
      tags:
        - Events
      security:
        - cookieAuth: []
      responses:
        200:
          description: Events successfully fetched
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Events loaded successfully
                  events:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        name:
                          type: string
                        description:
                          type: string
                        location:
                          type: string
                        startDate:
                          type: string
                          format: date-time
                        endDate:
                          type: string
                          format: date-time
                        submissionDeadline:
                          type: string
                          format: date-time
                        participantCount:
                          type: number
                          min: 0
                      required:
                        - id
                        - name
                        - description
                        - location
                        - startDate
                        - endDate
                        - submissionDeadline
                        - participantCount
                required:
                  - message
                  - events
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
                required:
                  - message
        404:
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
                required:
                  - mesasge
  /api/event/organizer-all:
    get:
      summary: Organizer's get all events with more data
      tags:
        - Events
      security:
        - cookieAuth: []
      responses:
        200:
          description: Events fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Events loaded successfully
                  events:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        name:
                          type: string
                        description:
                          type: string
                        location:
                          type: string
                        startDate:
                          type: string
                          format: date-time
                        endDate:
                          type: string
                          format: date-time
                        submissionDeadline:
                          type: string
                          format: date-time
                        participants:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: string
                                format: uuid
                              email:
                                type: string
                                format: email
                              emailVerified:
                                type: boolean
                              accountType:
                                type: string
                                enum: ["student", "organizer", "judge"]
                              firstName:
                                type: string
                              lastName:
                                type: string
                              schoolDivision:
                                type: string
                              gradeLevel:
                                type: string
                                enum:
                                  [
                                    "nine",
                                    "ten",
                                    "eleven",
                                    "twelve",
                                    "organizer",
                                    "judge",
                                  ]
                              isGovSchool:
                                type: boolean
                              techStack:
                                type: string
                              previousHackathon:
                                type: boolean
                              parentFirstName:
                                type: string
                              parentLastName:
                                type: string
                              parentEmail:
                                type: string
                                format: email
                              parentPhoneNumber:
                                type: string
                                example: 5408531056
                              createdAt:
                                type: string
                                format: date-time
                            required:
                              - id
                              - email
                              - emailVerified
                              - accountType
                              - firstName
                              - lastName
                              - schoolDivision
                              - gradeLevel
                              - isGovSchool
                              - techStack
                              - previousHackathon
                              - parentFirstName
                              - parentLastName
                              - parentEmail
                              - parentPhoneNumber
                              - createdAt
                        createdBy:
                          type: string
                          format: uuid
                        createdAt:
                          type: string
                          format: date-time
                      required:
                        - id
                        - name
                        - description
                        - location
                        - startDate
                        - endDate
                        - submissionDeadline
                        - participants
                        - createdBy
                        - createdAt
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
        403:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
        404:
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
  /api/event/get/{eventId}:
    get:
      summary: Get event by id
      tags:
        - Events
      security:
        - cookieAUth: []
      parameters:
        - name: eventId
          in: paths
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Event fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Event loaded successfully
                  event:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      name:
                        type: string
                      description:
                        type: string
                      location:
                        type: string
                      startDate:
                        type: string
                        format: date-time
                      endDate:
                        type: string
                        format: date-time
                      submissionDeadline:
                        type: string
                        format: date-time
                      participantCount:
                        type: number
                        min: 0
                    required:
                      - id
                      - name
                      - description
                      - location
                      - startDate
                      - endDate
                      - submissionDeadline
                      - participantCount
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Event ID is required
                required:
                  - message
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
                required:
                  - message
        404:
          description: Event or user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Event not found
  /api/event/organizer/{eventId}:
    get:
      summary: Organizer's get event by id with more data
      tags:
        - Events
      security:
        - cookieAuth: []
      parameters:
        - name: eventId
          in: paths
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Event fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Event loaded successfully
                  event:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      name:
                        type: string
                      description:
                        type: string
                      location:
                        type: string
                      startDate:
                        type: string
                        format: date-time
                      endDate:
                        type: string
                        format: date-time
                      submissionDeadline:
                        type: string
                        format: date-time
                      participants:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                            email:
                              type: string
                              format: email
                            emailVerified:
                              type: boolean
                            accountType:
                              type: string
                              enum: ["student", "organizer", "judge"]
                            firstName:
                              type: string
                            lastName:
                              type: string
                            schoolDivision:
                              type: string
                            gradeLevel:
                              type: string
                              enum:
                                [
                                  "nine",
                                  "ten",
                                  "eleven",
                                  "twelve",
                                  "organizer",
                                  "judge",
                                ]
                            isGovSchool:
                              type: boolean
                            techStack:
                              type: string
                            previousHackathon:
                              type: boolean
                            parentFirstName:
                              type: string
                            parentLastName:
                              type: string
                            parentEmail:
                              type: string
                              format: email
                            parentPhoneNumber:
                              type: string
                              example: 5408531056
                            createdAt:
                              type: string
                              format: date-time
                          required:
                            - id
                            - email
                            - emailVerified
                            - accountType
                            - firstName
                            - lastName
                            - schoolDivision
                            - gradeLevel
                            - isGovSchool
                            - techStack
                            - previousHackathon
                            - parentFirstName
                            - parentLastName
                            - parentEmail
                            - parentPhoneNumber
                            - createdAt
                      createdBy:
                        type: string
                        format: uuid
                      createdAt:
                        type: string
                        format: date-time
                    required:
                      - id
                      - name
                      - description
                      - location
                      - startDate
                      - endDate
                      - submissionDeadline
                      - participants
                      - createdBy
                      - createdAt
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Event ID is required
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
        403:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
        404:
          description: Event or User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Event not found
  /api/event/delete/{eventId}:
    delete:
      summary: Delete an event
      tags:
        - Events
      security:
        - cookieAuth: []
      parameters:
        - name: eventId
          in: paths
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Event deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Event deleted successfully
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Event ID is required
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
        403:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
        404:
          description: Event or user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Event not found
  /api/workshop/create:
    post:
      summary: Create a workshop
      tags:
        - Workshops
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                startDate:
                  type: string
                  format: date-time
                endDate:
                  type: string
                  format: date-time
              required:
                - name
                - description
                - startDate
                - endDate
      responses:
        201:
          description: Workshop created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Workshop created successfully
                  id:
                    type: string
                    format: uuid
                required:
                  - message
                  - id
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: All fields are required
                required:
                  - message
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
                required:
                  - message
        403:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
                required:
                  - message
        404:
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
                required:
                  - message
  /api/workshop/join/{workshopId}:
    post:
      summary: Join a workshop
      tags:
        - Workshops
      security:
        - cookieAuth: []
      parameters:
        - name: workshopId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Joined workshop successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Joined workshop successfully
                required:
                  - message
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Workshop ID is required
                required:
                  - message
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
                required:
                  - message
        404:
          description: Workshop or user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Workshop not found
                required:
                  - message
  /api/workshop/leave/{workshopId}:
    post:
      summary: Leave a workshop
      tags:
        - Workshops
      security:
        - cookieAuth: []
      parameters:
        - name: workshopId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Left workshop successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Left workshop successfully
                required:
                  - message
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Workshop ID is required
                required:
                  - message
          401:
            description: Unauthorized
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: Unauthorized
                  required:
                    - message
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
                required:
                  - message
        404:
          description: Workshop or user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Workshop not found
                required:
                  - message
  /api/workshop/all:
    get:
      summary: Get all Workshops
      tags:
        - Workshops
      secuirty:
        - cookieAuth: []
      responses:
        200:
          description: Workshops successfully fetched
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Workshops loaded successfully
                  workshops:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        name:
                          type: string
                        description:
                          type: string
                        googleMeetURL:
                          type: string
                          format: uri
                        startDate:
                          type: string
                          format: date-time
                        endDate:
                          type: string
                          format: date-time
                        participantCount:
                          type: number
                          min: 0
                        organizer:
                          type: string
                      required:
                        - id
                        - name
                        - description
                        - googleMeetURL
                        - startDate
                        - endDate
                        - participantCount
                        - organizer
                required:
                  - message
                  - workshops
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
                required:
                  - message
        404:
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
                required:
                  - message
  /api/workshop/organizer-all:
    get:
      summary: Organizer's get all workshops with more data
      tags:
        - Workshops
      secuirty:
        - cookieAuth: []
      responses:
        200:
          description: Workshops successfully fetched
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Workshops loaded successfully
                  workshops:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        name:
                          type: string
                        description:
                          type: string
                        googleMeetURL:
                          type: string
                          format: uri
                        startDate:
                          type: string
                          format: date-time
                        endDate:
                          type: string
                          format: date-time
                        participants:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: string
                                format: uuid
                              email:
                                type: string
                                format: email
                              emailVerified:
                                type: boolean
                              accountType:
                                type: string
                                enum: ["student", "organizer", "judge"]
                              firstName:
                                type: string
                              lastName:
                                type: string
                              schoolDivision:
                                type: string
                              gradeLevel:
                                type: string
                                enum:
                                  [
                                    "nine",
                                    "ten",
                                    "eleven",
                                    "twelve",
                                    "organizer",
                                    "judge",
                                  ]
                              isGovSchool:
                                type: boolean
                              techStack:
                                type: string
                              previousHackathon:
                                type: boolean
                              parentFirstName:
                                type: string
                              parentLastName:
                                type: string
                              parentEmail:
                                type: string
                                format: email
                              parentPhoneNumber:
                                type: string
                                example: 5408531056
                              createdAt:
                                type: string
                                format: date-time
  /api/workshop/get/{workshopId}:
    get:
      summary: Get workshop by id
      tags:
        - Workshops
      security:
        - cookieAuth: []
      parameters:
        - name: workshopId
          in: paths
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Workshop fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Workshop loaded successfully
                  workshop:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      name:
                        type: string
                      description:
                        type: string
                      googleMeetURL:
                        type: string
                        format: uri
                      startDate:
                        type: string
                        format: date-time
                      endDate:
                        type: string
                        format: date-time
                      participantCount:
                        type: number
                        min: 0
                    required:
                      - id
                      - name
                      - description
                      - googleMeetURL
                      - startDate
                      - endDate
                      - participantCount
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Workshop ID is required
                required:
                  - message
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
                required:
                  - message
        404:
          description: Workshop or user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Workshop not found
                required:
                  - message
  /api/workshop/organizer/{workshopId}:
    get:
      description: Organizer's get workshop by id with more data
      tags:
        - Workshops
      security:
        - cookieAuth: []
      parameters:
        - name: workshopId
          in: paths
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Workshop fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Workshop loaded successfully
                  workshop:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      name:
                        type: string
                      description:
                        type: string
                      googleMeetURL:
                        type: string
                        format: uri
                      startDate:
                        type: string
                        format: date-time
                      endDate:
                        type: string
                        format: date-time
                      participants:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                            email:
                              type: string
                              format: email
                            emailVerified:
                              type: boolean
                            accountType:
                              type: string
                              enum: ["student", "organizer", "judge"]
                            firstName:
                              type: string
                            lastName:
                              type: string
                            schoolDivision:
                              type: string
                            gradeLevel:
                              type: string
                              enum:
                                [
                                  "nine",
                                  "ten",
                                  "eleven",
                                  "twelve",
                                  "organizer",
                                  "judge",
                                ]
                            isGovSchool:
                              type: boolean
                            techStack:
                              type: string
                            previousHackathon:
                              type: boolean
                            parentFirstName:
                              type: string
                            parentLastName:
                              type: string
                            parentEmail:
                              type: string
                              format: email
                            parentPhoneNumber:
                              type: string
                              example: 5408531056
                            createdAt:
                              type: string
                              format: date-time
                          required:
                            - id
                            - email
                            - emailVerified
                            - accountType
                            - firstName
                            - lastName
                            - schoolDivision
                            - gradeLevel
                            - isGovSchool
                            - techStack
                            - previousHackathon
                            - parentFirstName
                            - parentLastName
                            - parentEmail
                            - parentPhoneNumber
                            - createdAt
                      organizer:
                        type: string
                      createdAt:
                        type: string
                        format: date-time
                    required:
                      - id
                      - name
                      - description
                      - googleMeetURL
                      - startDate
                      - endDate
                      - participants
                      - organizer
                      - createdAt
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Workshop ID is required
                required:
                  - message
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
                required:
                  - message
        403:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                proeprties:
                  message:
                    type: string
                    example: Unauthorized
                required:
                  - message
        404:
          description: Workshop or user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Workshop not found
                required:
                  - message

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: token
